---
import Layout from "./Layout.astro";
---

<Layout>
    <div class="container">
    <div class="header">
      <h1>üî¢ Character Counter</h1>
      <p>Count characters, words, sentences, and more in real-time</p>
    </div>

    <div class="content">
      <div id="successMessage" class="success-message" style="display: none;"></div>

      <div class="textarea-wrapper">
        <textarea 
          id="textInput" 
          placeholder="Start typing or paste your text here to analyze..."
          autofocus
        ></textarea>
      </div>

      <div class="stats-grid">
        <div class="stat-card">
          <div class="stat-label">Characters</div>
          <div class="stat-value" id="charCount">0</div>
        </div>
        <div class="stat-card">
          <div class="stat-label">Words</div>
          <div class="stat-value" id="wordCount">0</div>
        </div>
        <div class="stat-card">
          <div class="stat-label">Sentences</div>
          <div class="stat-value" id="sentenceCount">0</div>
        </div>
        <div class="stat-card">
          <div class="stat-label">Paragraphs</div>
          <div class="stat-value" id="paragraphCount">0</div>
        </div>
      </div>

      <div class="detailed-stats">
        <h3>üìä Detailed Statistics</h3>
        <div class="stat-row">
          <span class="stat-row-label">Characters (no spaces)</span>
          <span class="stat-row-value" id="charNoSpaceCount">0</span>
        </div>
        <div class="stat-row">
          <span class="stat-row-label">Lines</span>
          <span class="stat-row-value" id="lineCount">0</span>
        </div>
        <div class="stat-row">
          <span class="stat-row-label">Average word length</span>
          <span class="stat-row-value" id="avgWordLength">0</span>
        </div>
        <div class="stat-row">
          <span class="stat-row-label">Reading time (avg)</span>
          <span class="stat-row-value" id="readingTime">0 min</span>
        </div>
        <div class="stat-row">
          <span class="stat-row-label">Speaking time (avg)</span>
          <span class="stat-row-value" id="speakingTime">0 min</span>
        </div>
      </div>

      <div class="actions">
        <button class="btn-secondary" id="copyBtn">üìã Copy Text</button>
        <button class="btn-secondary" id="copyStatsBtn">üìä Copy Stats</button>
        <button class="btn-secondary" id="clearBtn">üóëÔ∏è Clear</button>
        <a href="/converter" style="text-decoration: none;">
          <button class="btn-primary">‚Üê Back to Converter</button>
        </a>
      </div>
    </div>
  </div>

     <script>
    const textInput = document.getElementById('textInput') as HTMLTextAreaElement;
    const charCountEl = document.getElementById('charCount') as HTMLDivElement;
    const wordCountEl = document.getElementById('wordCount') as HTMLDivElement;
    const sentenceCountEl = document.getElementById('sentenceCount') as HTMLDivElement;
    const paragraphCountEl = document.getElementById('paragraphCount') as HTMLDivElement;
    const charNoSpaceCountEl = document.getElementById('charNoSpaceCount') as HTMLSpanElement;
    const lineCountEl = document.getElementById('lineCount') as HTMLSpanElement;
    const avgWordLengthEl = document.getElementById('avgWordLength') as HTMLSpanElement;
    const readingTimeEl = document.getElementById('readingTime') as HTMLSpanElement;
    const speakingTimeEl = document.getElementById('speakingTime') as HTMLSpanElement;
    const copyBtn = document.getElementById('copyBtn') as HTMLButtonElement;
    const copyStatsBtn = document.getElementById('copyStatsBtn') as HTMLButtonElement;
    const clearBtn = document.getElementById('clearBtn') as HTMLButtonElement;
    const successMessage = document.getElementById('successMessage') as HTMLDivElement;

    interface TextStats {
      characters: number;
      charactersNoSpaces: number;
      words: number;
      sentences: number;
      paragraphs: number;
      lines: number;
      avgWordLength: number;
      readingTime: number;
      speakingTime: number;
    }

    function analyzeText(text: string): TextStats {
      const characters = text.length;
      const charactersNoSpaces = text.replace(/\s/g, '').length;
      
      const words = text.trim() === '' ? 0 : text.trim().split(/\s+/).length;
      
      const sentences = text.trim() === '' ? 0 : 
        text.split(/[.!?]+/).filter(s => s.trim().length > 0).length;
      
      const paragraphs = text.trim() === '' ? 0 : 
        text.split(/\n\s*\n/).filter(p => p.trim().length > 0).length;
      
      const lines = text === '' ? 0 : text.split('\n').length;
      
      const avgWordLength = words === 0 ? 0 : 
        Math.round((charactersNoSpaces / words) * 10) / 10;
      
      const readingTime = Math.ceil(words / 200);
      const speakingTime = Math.ceil(words / 130);

      return {
        characters,
        charactersNoSpaces,
        words,
        sentences,
        paragraphs,
        lines,
        avgWordLength,
        readingTime,
        speakingTime
      };
    }

    function updateStats(): void {
      const text = textInput.value;
      const stats = analyzeText(text);

      charCountEl.textContent = stats.characters.toLocaleString();
      wordCountEl.textContent = stats.words.toLocaleString();
      sentenceCountEl.textContent = stats.sentences.toLocaleString();
      paragraphCountEl.textContent = stats.paragraphs.toLocaleString();
      charNoSpaceCountEl.textContent = stats.charactersNoSpaces.toLocaleString();
      lineCountEl.textContent = stats.lines.toLocaleString();
      avgWordLengthEl.textContent = stats.avgWordLength.toString();
      readingTimeEl.textContent = `${stats.readingTime} min`;
      speakingTimeEl.textContent = `${stats.speakingTime} min`;
    }

    function showSuccess(message: string): void {
      successMessage.textContent = message;
      successMessage.style.display = 'block';
      setTimeout(() => {
        successMessage.style.display = 'none';
      }, 3000);
    }

    function copyText(): void {
      textInput.select();
      document.execCommand('copy');
      showSuccess('‚úì Text copied to clipboard!');
    }

    function copyStats(): void {
      const text = textInput.value;
      const stats = analyzeText(text);
      
      const statsText = `
üìä Text Statistics

Characters: ${stats.characters.toLocaleString()}
Characters (no spaces): ${stats.charactersNoSpaces.toLocaleString()}
Words: ${stats.words.toLocaleString()}
Sentences: ${stats.sentences.toLocaleString()}
Paragraphs: ${stats.paragraphs.toLocaleString()}
Lines: ${stats.lines.toLocaleString()}
Average word length: ${stats.avgWordLength}
Reading time: ${stats.readingTime} min
Speaking time: ${stats.speakingTime} min
      `.trim();

      const tempTextarea = document.createElement('textarea');
      tempTextarea.value = statsText;
      document.body.appendChild(tempTextarea);
      tempTextarea.select();
      document.execCommand('copy');
      document.body.removeChild(tempTextarea);
      
      showSuccess('‚úì Statistics copied to clipboard!');
    }

    function clearText(): void {
      textInput.value = '';
      updateStats();
      textInput.focus();
    }

    textInput.addEventListener('input', updateStats);
    copyBtn.addEventListener('click', copyText);
    copyStatsBtn.addEventListener('click', copyStats);
    clearBtn.addEventListener('click', clearText);

    updateStats();
  </script>
</Layout>


 <style>

    .container {
      max-width: 900px;
      width: 100%;
      background: white;
      border-radius: 16px;
      box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
      overflow: hidden;
    }

    .header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 2rem;
      text-align: center;
    }

    .header h1 {
      font-size: 2rem;
      margin-bottom: 0.5rem;
    }

    .header p {
      opacity: 0.9;
      font-size: 0.95rem;
    }

    .content {
      padding: 2rem;
    }

    .textarea-wrapper {
      position: relative;
      margin-bottom: 1.5rem;
    }

    textarea {
      width: 100%;
      min-height: 300px;
      padding: 1rem;
      border: 2px solid #e2e8f0;
      border-radius: 8px;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      font-size: 1rem;
      resize: vertical;
      transition: border-color 0.3s;
      line-height: 1.6;
    }

    textarea:focus {
      outline: none;
      border-color: #667eea;
    }

    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin-bottom: 1.5rem;
    }

    .stat-card {
      background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
      padding: 1.5rem;
      border-radius: 12px;
      text-align: center;
      border: 2px solid #e2e8f0;
      transition: transform 0.3s, box-shadow 0.3s;
    }

    .stat-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .stat-label {
      font-size: 0.85rem;
      color: #64748b;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      margin-bottom: 0.5rem;
    }

    .stat-value {
      font-size: 2rem;
      font-weight: 700;
      color: #667eea;
      font-variant-numeric: tabular-nums;
    }

    .detailed-stats {
      background: #f8fafc;
      border: 2px solid #e2e8f0;
      border-radius: 12px;
      padding: 1.5rem;
      margin-bottom: 1.5rem;
    }

    .detailed-stats h3 {
      font-size: 1.1rem;
      color: #334155;
      margin-bottom: 1rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .stat-row {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.75rem 0;
      border-bottom: 1px solid #e2e8f0;
    }

    .stat-row:last-child {
      border-bottom: none;
    }

    .stat-row-label {
      font-size: 0.95rem;
      color: #475569;
      font-weight: 500;
    }

    .stat-row-value {
      font-size: 1rem;
      font-weight: 600;
      color: #667eea;
      font-variant-numeric: tabular-nums;
    }

    .actions {
      display: flex;
      gap: 1rem;
      justify-content: center;
      flex-wrap: wrap;
    }

    button {
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 6px;
      font-size: 0.95rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s;
    }

    .btn-primary {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
    }

    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
    }

    .btn-secondary {
      background: #f1f5f9;
      color: #475569;
    }

    .btn-secondary:hover {
      background: #e2e8f0;
    }

    .success-message {
      background: #d1fae5;
      border: 2px solid #6ee7b7;
      color: #065f46;
      padding: 1rem;
      border-radius: 8px;
      text-align: center;
      margin-bottom: 1rem;
      font-weight: 500;
    }

    @media (max-width: 768px) {
      body {
        padding: 1rem;
      }

      .header h1 {
        font-size: 1.5rem;
      }

      .stat-value {
        font-size: 1.5rem;
      }

      .stats-grid {
        grid-template-columns: 1fr 1fr;
      }
    }
  </style>